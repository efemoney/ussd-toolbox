/*
 * Copyright 2020 Efeturi Money. All rights reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package tasks.internal

import com.squareup.kotlinpoet.*
import com.squareup.kotlinpoet.AnnotationSpec.UseSiteTarget.FILE
import com.squareup.kotlinpoet.ParameterizedTypeName.Companion.parameterizedBy
import kotlinx.serialization.Serializable
import kotlinx.serialization.builtins.ListSerializer
import kotlinx.serialization.json.Json
import org.gradle.api.provider.Provider
import java.io.File

internal typealias Countries = List<CountryDto>
internal typealias Languages = Set<LanguageDto>

@Serializable
internal data class CountryDto(
  val name: String,
  val nativeName: String,
  val alpha2Code: String,
  val altSpellings: List<String>,
  val translations: Map<String, String>,
  val languages: List<LanguageDto>
)

@Serializable
internal data class LanguageDto(
  val name: String,
  val nativeName: String,
  val iso639_1: String = "",
  val iso639_2: String = ""
)

internal fun generatedBy(taskName: String) = "Do not edit. Code generated by $taskName task as part of build."

internal fun generatedFilesSuppressAnnotation() =
  AnnotationSpec.builder(Suppress::class).useSiteTarget(FILE)
    .addMember(
      "%S, %S, %S, %S, %S",
      "EnumEntryName",
      "NonAsciiCharacters",
      "SpellCheckingInspection",
      "RemoveRedundantBackticks",
      "MemberVisibilityCanBePrivate"
    )
    .build()

internal class ClassNames(packageName: Provider<String>) {

  val string = STRING

  val list = LIST

  val map = MAP

  val country by lazy {
    ClassName(packageName.get(), "Country")
  }

  val countries by lazy {
    ClassName(packageName.get(), "Countries")
  }

  val language by lazy {
    ClassName(packageName.get(), "Language")
  }

  val languages by lazy {
    ClassName(packageName.get(), "Languages")
  }

  val languageCode by lazy {
    ClassName(packageName.get(), "LanguageCode")
  }

  val countryCode by lazy {
    ClassName(packageName.get(), "CountryCode")
  }

  val mapOf639ToString by lazy {
    map.parameterizedBy(languageCode, string)
  }

  val listOfStrings by lazy {
    list.parameterizedBy(string)
  }

  val listOfLanguages by lazy {
    list.parameterizedBy(language)
  }

  val mapOfCodeToLanguage by lazy {
    map.parameterizedBy(languageCode, language)
  }

  val mapOfCodeToCountry by lazy {
    map.parameterizedBy(countryCode, country)
  }
}

internal class ClassNames2(packageName: String) {
  val string = STRING
  val list = LIST
  val map = MAP
  val country = ClassName(packageName, "Country")
  val countries = ClassName(packageName, "Countries")
  val language = ClassName(packageName, "Language")
  val languages = ClassName(packageName, "Languages")
  val languageCode = ClassName(packageName, "LanguageCode")
  val countryCode = ClassName(packageName, "CountryCode")
  val mapOf639ToString = map.parameterizedBy(languageCode, string)
  val listOfStrings = list.parameterizedBy(string)
  val listOfLanguages = list.parameterizedBy(language)
  val mapOfCodeToLanguage = map.parameterizedBy(languageCode, language)
  val mapOfCodeToCountry = map.parameterizedBy(countryCode, country)
}

internal object CountriesJsonParser {

  private val json = Json { ignoreUnknownKeys = true }

  fun parse(from: File): Countries = json.decodeFromString(ListSerializer(CountryDto.serializer()), from.readText())
}